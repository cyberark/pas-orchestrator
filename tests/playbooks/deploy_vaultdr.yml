---

- hosts: localhost
  gather_facts: no
  tasks:

    - name: Get current region
      shell: |
        echo $AWS_REGION
      register: my_region

    - name: Get current vpc id
      shell: |
        INTERFACE=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
        VPC_ID=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE}/vpc-id)
        echo $VPC_ID
      register: my_vpc

    - name: Get current subnet id
      shell: |
        INTERFACE=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
        SUBNET_ID=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE}/subnet-id)
        echo $SUBNET_ID
      register: my_subnet

    - name: Create security group for Vault
      ec2_group:
        name: "PAS-Orchestrator-DRVault-{{ env_timestamp }}"
        description: Security Group for PAS Orchestrator DRVault
        vpc_id: "{{ my_vpc.stdout }}"
        rules:
          - proto: tcp
            ports:
              - 1858
            cidr_ip: 0.0.0.0/0
            rule_desc: Allow all traffic on port 1858
        tags:
          Timestamp: "{{ env_timestamp }}"
      register: my_sg

    - name: Deploy Vault
      include_role:
        name: cf_deploy
      vars:
        - deploy_bucket: cloud-initiatives-pipeline-bucket
        - cf_template_url: https://raw.githubusercontent.com/cyberark/pas-on-cloud/develop/aws/DRVault-Single-Deployment.yaml
        - cf_template_parameters:
            EULA: Accept
            KeyName: "{{ keypair }}"
            VaultPrivateIP: "{{ vault_ip }}"
            VaultDRPassword: "{{ ansible_password }}"
            Secret: "{{ ansible_password }}"
            VaultInstanceName: "[PAS-Orchestrator] DRVault"
            VaultInstanceType: m5.large
            VaultHostName: vaultdr
            VaultInstanceSecurityGroups: "{{ my_sg.group_id }}"
            DRInstanceSubnetId: "{{ my_subnet.stdout }}"
        - aws_region: "{{ my_region.stdout }}"

    - name: Get Vault machine details from CloudFormation
      ec2_instance_facts:
        region: "{{ my_region.stdout }}"
        instance_ids:
          - "{{ cf_output | json_query('[?logical_resource_id == `VaultDRMachine` ] | [0].physical_resource_id') }}"
      register: vaultdr_machine

    - name: Save Vault ip address in text file
      copy:
        dest: "/tmp/vaultdr_ip_tc_{{ tc_number }}.txt"
        content: |
          {{ vaultdr_machine.instances[0].private_ip_address }}

    - name: Save cloudformation id for later cleanup
      copy:
        dest: "/tmp/cf_vaultdr_tc_{{ tc_number }}.txt"
        content: |
          {{ cloudformation_stack_id }}
