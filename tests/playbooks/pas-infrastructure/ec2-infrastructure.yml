---

- hosts: localhost
  gather_facts: no
  vars:
    ansible_user_data: |
      <powershell>
      # Change Password
      $admin = [adsi]("WinNT://./administrator, user")
      $admin.PSBase.Invoke("SetPassword", "{{ ansible_password }}")

      # Configure machine for ansible remoting
      $url = "https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"
      $file = "$env:temp\ConfigureRemotingForAnsible.ps1"
      (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)
      powershell.exe -ExecutionPolicy ByPass -File $file -EnableCredSSP
      </powershell>

  tasks:

    - name: Get current vpc id
      shell: |
        INTERFACE=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
        VPC_ID=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE}/vpc-id)
        echo $VPC_ID
      register: my_vpc

    - name: Get current subnet id
      shell: |
        INTERFACE=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
        SUBNET_ID=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE}/subnet-id)
        echo $SUBNET_ID
      register: my_subnet

    - set_fact:
        subnet_id: "{{ my_subnet.stdout }}"

    - name: Create security group for DC
      ec2_group:
        name: "PAS-Orchestrator-DC-{{ env_timestamp }}"
        description: Security Group for PAS Orchestrator Domain Controller
        vpc_id: "{{ my_vpc.stdout }}"
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
        tags:
          Timestamp: "{{ env_timestamp }}"
      register: dc_sg

    - name: Create security group for Components
      ec2_group:
        name: "PAS-Orchestrator-Components-{{ env_timestamp }}"
        description: Security Group for PAS Orchestrator Components
        vpc_id: "{{ my_vpc.stdout }}"
        rules:
          - proto: tcp
            from_port: 1
            to_port: 65535
            cidr_ip: 0.0.0.0/0
        tags:
          Timestamp: "{{ env_timestamp }}"
      register: comp_sg

    - name: Get latest windows 2012 ami
      ec2_ami_facts:
        owners: 801119661308
        filters:
          name: "Windows_Server-2012-R2_RTM-English-64Bit-Base-*"
      register: ami_find_2012

    - name: Get latest windows 2016 ami
      ec2_ami_facts:
        owners: 801119661308
        filters:
          name: "Windows_Server-2016-English-Full-Base-*"
      register: ami_find_2016

    - name: Create Domain Controller
      include_tasks: create_ec2_batch.yml
      vars:
        - component_name: dc
        - count: 1
        - ami_id: "{{ ami_find_2012.images[0].image_id }}"
        - security_group: "{{ dc_sg.group_id }}"
      when: indomain == "yes"

    - name: Add DC Machine to Host Group
      add_host:
        name: "{{ ec2_machines.instances[0].private_ip }}"
        group: dc
      when: indomain == "yes"

    - name: Save domain controller ip address
      set_fact:
        dc_ip: "{{ ec2_machines.instances[0].private_ip }}"
      when: indomain == "yes"

    - name: Create PVWA Machines
      include_tasks: create_ec2_batch.yml
      vars:
        - component_name: pvwa
        - count: "{{ pas_count }}"
        - ami_id: "{{ ami_find_2016.images[0].image_id }}"
        - security_group: "{{ comp_sg.group_id }}"

    - name: Add PVWA Machines to Host Group
      add_host:
        name: "{{ item.private_ip }}"
        group: pvwa
      with_items: "{{ ec2_machines.instances }}"

    - name: Create CPM Machines
      include_tasks: create_ec2_batch.yml
      vars:
        - component_name: cpm
        - count: "{{ pas_count }}"
        - ami_id: "{{ ami_find_2016.images[0].image_id }}"
        - security_group: "{{ comp_sg.group_id }}"

    - name: Add CPM to Host Group
      add_host:
        name: "{{ item.private_ip }}"
        group: cpm
      with_items: "{{ ec2_machines.instances }}"

    - name: Create PSM Machines
      include_tasks: create_ec2_batch.yml
      vars:
        - component_name: psm
        - count: "{{ pas_count }}"
        - ami_id: "{{ ami_find_2016.images[0].image_id }}"
        - security_group: "{{ comp_sg.group_id }}"

    - name: Add PSM to Host Group
      add_host:
        name: "{{ item.private_ip }}"
        group: psm
      with_items: "{{ ec2_machines.instances }}"

- hosts: dc
  gather_facts: no
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_transport: basic
    ansible_port: 5986
    domain: cyberark.com

  tasks:

    - name: Wait for DC to Respond
      wait_for_connection:
        timeout: 600
      when: indomain == "yes"

    - name: Install Active Directory Feature
      win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        include_sub_features: yes
        state: present
      when: indomain == "yes"

    - name: Install Domain on Active Directory
      win_domain:
        dns_domain_name: "{{ domain }}"
        safe_mode_password: "{{ ansible_password }}"
      register: ad
      when: indomain == "yes"

    - name: Reboot Domain Controller
      win_reboot:
        msg: "Installing AD. Rebooting..."
        pre_reboot_delay: 15
        reboot_timeout: 300
      when:
        - ad.changed
        - indomain == "yes"

- hosts: pvwa:cpm:psm
  gather_facts: no
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_transport: basic
    ansible_port: 5986
    domain: cyberark.com

  tasks:

    - name: Wait for PAS Machines to Respond
      wait_for_connection:
        timeout: 600

    - name: Copy diskpart script
      win_copy:
        src: files/diskpart.txt
        dest: C:\

    - name: Bring D drive online
      win_shell: |
        diskpart /s diskpart.txt
      args:
        chdir: C:\
      ignore_errors: true

    - name: Set DNS on IPV4 Adapter to DC
      win_dns_client:
        adapter_names: '*'
        ipv4_addresses:
        - "{{ hostvars['localhost']['dc_ip'] }}"
        - "8.8.8.8"
        log_path: C:\dns_log.txt
      when: indomain == "yes"

    - name: Flush DNS Cache
      win_shell: |
        Clear-DnsClientCache
        Register-DnsClient
      when: indomain == "yes"

    - name: Join PAS Machines to the Domain
      win_domain_membership:
        dns_domain_name: "{{ domain }}"
        domain_admin_user: "{{ domain }}\\{{ ansible_user }}"
        domain_admin_password: "{{ ansible_password }}"
        state: domain
      register: domain_state
      when: indomain == "yes"

    - name: Reboot PAS Machines to Apply Changes
      win_reboot:
          reboot_timeout: 300
      when: domain_state.reboot_required
      when: indomain == "yes"

- hosts: localhost
  gather_facts: no
  connection: local
  tasks:

    - name: Copy EC2 py files to Outputs Fodler
      copy:
        src: "inventory/{{ item }}"
        dest: "outputs/{{ item }}"
        remote_src: yes
      with_items:
        - ec2.py
        - ec2.ini

    - name: Make ec2.py executable
      file:
        path: outputs/ec2.py
        mode: "+x"

    - name: Change the domain placeholder on ec2.ini
      shell: |
        sed -i -- 's/tc_number_placeholder/{{ tc_number }}/g' outputs/ec2.ini

    - name: Get Dynamic Inventory
      shell: |
        ansible-inventory -i outputs/ec2.py --list --export -y | yq '.all.children | with_entries( select(.key|contains("tag_Type") ) )' | jq -s '{windows:{children:.[]}}' >> outputs/hosts.json
      register: inventory

    - name: Convert Inventory JSON to YAML
      command: "json2yaml outputs/hosts.json outputs/hosts_tc_{{ tc_number }}.yml"

    - name: Remove Empty Objects
      command: "sed -i -- 's/ {}//g' outputs/hosts_tc_{{ tc_number }}.yml"

    - name: Remove tag_Type_ string
      command: "sed -i -- 's/tag_Type_//g' outputs/hosts_tc_{{ tc_number }}.yml"

    - name: Remove Leftovers from Outputs Folder
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - outputs/hosts.json
        - outputs/ec2.py
        - outputs/ec2.ini
